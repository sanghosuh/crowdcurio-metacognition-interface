var TaskRoutingManager = require('./task-router');
var TaskSession = require('./task-session');

function CrowdCurioClient(){
    // core api vars
    this.auth = null;
    this.client = null;
    this.task_session = null;

    // routing manager
    this.router = null;

    // routing vars
    this.task = null;
    this.data = null;
    this.user = null;
}

CrowdCurioClient.prototype.init = function(params){
    var that = this;
    return new Promise(function(resolve, reject) {
        // authenticate & instantiate the client's connection
        that.auth = new coreapi.auth.SessionAuthentication({
            csrfCookieName: 'csrftoken',
            csrfHeaderName: 'X-CSRFToken'
        })
        that.client = new coreapi.Client({auth: that.auth})

        // create the task routing manager
        that.router = new TaskRoutingManager();

        // set (1) task and (2) experiment vars for routing
        that.user = {id: params['user'], type: 'User'};
        that.task = {id: params['task'], type: 'Task'};
        if(params['experiment'] !== undefined && params['experiment'] > 0){
            that.experiment = {id: params['experiment'], type: 'Experiment'}
            that.condition = {id: params['condition'], type: 'Condition'}

            that.router.init(that.client, {
                'page_size': 3,
                'task': params['task'],
                'experiment': params['experiment'],
                'condition': params['condition']
            });

        } else {
            that.experiment = null;
            
            that.router.init(that.client, {
                'page_size': 3,
                'task': params['task']
            });
        }

        // if collaboration is active, create and initialize a task session and wait to resolve the promise until the task session has been initialized
        if(params['configuration']['collaboration']){
            if(params['configuration']['collaboration']['active']){
                that.task_session = new TaskSession();
                that.task_session.init(jQuery.extend({ 'client': that.client}, params)).then(function(){
                    resolve();
                });
            }
        } else {
            resolve();
        }
    }.bind(this));
}

CrowdCurioClient.prototype.setData = function(id){
    this.data = {id: id, type: 'Data'};
}

CrowdCurioClient.prototype.getNextTask = function(queue_type, callback){
    var that = this;
    // call the router's get next task function.
    this.router.getNextTask(queue_type, function(task){
        // if no task was returned from the API, return an empty object
        if(task === undefined){
            callback({});
        } else {
            // return the task
            callback(task);
        }
    });
}


// General-Purpose CRUD Operations for Models
// note: create is supported for two models (event/response)
// update and partialUpdate are supported for all models
// list and listAll are supported for two models (response/data)
// delete is supported for all models
CrowdCurioClient.prototype.create = function(model, params, callback){
    var that = this;
    // extend params by adding relations
    if(model === 'response'){
        params = jQuery.extend({
            owner: that.user,
            data: that.data,
            task: that.task,
            experiment: that.experiment,
            condition: that.condition
        }, params);
    } else if (model === 'event'){
        params = jQuery.extend({
            user: that.user,
            experiment: that.experiment,
            condition: that.condition
        }, params);
    } else if (model == 'annotation'){
        params = jQuery.extend({
            owner: that.user,
            data: that.data,
            task: that.task,
            experiment: that.experiment,
            condition: that.condition,
            task_session: {id: that.task_session.task_session, type: 'TaskSession'},
            updated_by: that.user
        }, params);
    }

    let action = [model, "create"];
    this.client.action(schema, action, params).then(function(result) {
        callback(result);
    });
}

CrowdCurioClient.prototype.update = function(model, params, callback){
    var that = this;
    if (model == 'annotation'){
        params = jQuery.extend({
            updated_by: that.user
        }, params);
    }

    let action = [model, "update"];
    this.client.action(schema, action, params).then(function(result) {
        callback(result);
    });
}

CrowdCurioClient.prototype.partialUpdate = function(model, params, callback){
    let action = [model, "partial_update"];
    this.client.action(schema, action, params).then(function(result) {
        callback(result);
    });
}

CrowdCurioClient.prototype.list = function(model, params, callback){
    var that = this;
    // extend params by adding relations
    if(model === 'response'){
        if (that.user) {
            params.owner = that.user.id;
        }
        if (that.data) {
            params.data = that.data.id;
        }
        if (that.task) {
            params.task = that.task.id;
        }
        if (that.experiment) {
            params.experiment = that.experiment.id;
        }
        if (that.condition) {
            params.condition = that.condition.id;
        }
    } else if (model === 'data'){
        if (that.task) {
            params.task = that.task.id;
        }
        if (that.experiment) {
            params.experiment = that.experiment.id;
        }
        if (that.condition) {
            params.condition = that.condition.id;
        }
    }

    let action = [model, "list"];
    this.client.action(schema, action, params).then(function(result) {
        callback(result);
    });
}

CrowdCurioClient.prototype.listAll = function(model, params, callback){
    let that = this;
    let results = [];
    params.page = 1;
    listNextPage();
    function listNextPage() {
        that.list(model, params, function(response) {
            Array.prototype.push.apply(results, response.results);
            if (!response.links.next) {
                callback(results);
                return;
            }
            params.page += 1;
            listNextPage();
        });
    };
}

CrowdCurioClient.prototype.delete = function(model, params, callback){
    let action = [model, "delete"];
    this.client.action(schema, action, params).then(function(result) {
        callback(result);
    });
}


module.exports = CrowdCurioClient;